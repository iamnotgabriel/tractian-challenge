openapi: 3.0.1

info:
  title: Challenge API 
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: The local API server
paths:
  /assets:
    get:
      summary: List paginated assets 
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/skipParam"
      responses:
        '200': 
          description: Page of assets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '4XX':
          $ref: "#/components/responses/UserError"
        '5XX':
          $ref: "#/components/responses/ServerError"
    post: {}
  /assets/{assetId}:
    get: {}
    delete: {}
    patch: {}
  /units:
    get: {}
    post: {}
  /units/{unitId}:
    get: {}
    delete: {}
    patch: {}
  /companies:
    get:
      summary: Paginated list of companies
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/skipParam"
        - name: sort
          in: query
          description: Sort result always ASC
          schema:
            type: string
            enum:
              - id
              - createAt
              - name
              - document
      responses:
        '200':
          description: Page of companies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Company"
                  total: 
                    type: number
              
    post:
      summary: Create a new company
      requestBody:
        required: true
        description: Company object to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCompanyDTO"
      responses:
        '201':
          description: Created company object
          headers:
            Content-Location:
              $ref: "#/components/headers/Content-Location"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
        '4XX':
          $ref: "#/components/responses/UserError"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /companies/{companyId}:
    get:
      summary: Read company by id
      responses:
        '200':
          description: Company object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        '4XX':
          $ref: "#/components/responses/UserError"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete company by id
      responses:
        '204':
          description: No body return
        '4XX':
          $ref: "#/components/responses/UserError"
        '5XX':
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update company by id
      requestBody:
        required: true
        description: Partial object of company to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCompanyDTO"
      responses:
        '204':
          description: No body return
        '4XX':
          $ref: "#/components/responses/UserError"
        '5XX':
          $ref: "#/components/responses/ServerError"

  /users:
    get: {}
    post: {}
  /users/{userId}:
    get: {}
    delete: {}
    patch: {}
components:
  schemas:
    APIError:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        details:
          type: array 
          items:
            anyOf:
              - type: string
              - type: object
              - type: array
                items:
                  anyOf:
                    - type: string
                    - type: object
    ObjectId:
      type: string
      example: '645e767cadf2f3d26ce95101'
    Entity:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        createdAt:
          type: string
          format: date-time
    AssetStatus:
      type: string
      enum:
        - RUNNING
        - ALERTING
        - STOPPED
    HealthLevel:
      type: number
      minimum: 0
      maximum: 100
    Asset:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        image:
          type: string
        name:
          type: string
        description:
          type: string
        model:
          type: string
        owner:
          type: string
        status:
          $ref: '#/components/schemas/AssetStatus'
        healthLevel:
          $ref:  '#/components/schemas/HealthLevel'
    CreateCompanyDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: "Industria Freios"
        document:
          type: string
          description: "Legal identifier of the company (CNPJ in Brazil, EIN in USA)"
          example: "35755699000184"
    Company:
      allOf:
        - $ref: "#/components/schemas/CreateCompanyDTO"
        - $ref: "#/components/schemas/Entity"
  parameters:
    skipParam:
      name: skip
      in: query
      description: entries to skip in a listing
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:
      name: limit
      in: query
      description: max number of entries to list
      schema: 
        type: integer
        format: int32
        minimum: 1
        maximum: 50
        default: 10
  headers:
    Content-Location:
      description: Path of the resource created
      schema:
        type: string
        example: /api/v1/companies/646138a43199fe0c5d69e13e
  responses:
    UserError:
      description: User error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

